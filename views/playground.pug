doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0')
    title Project - CodeBuddy
    link(rel='stylesheet', type='text/css', href='/semantic/dist/semantic.min.css')
    |  /* WebGazer.js library */
    script(src='webgazer.js', type='text/javascript')
    style(type='text/css').
      body {
      background-color: #FFFFFF;
      }
      .ui.menu .item img.logo {
      margin-right: 1.5em;
      }
      .main.container {
      margin-top: 7em;
      }
      .wireframe {
      margin-top: 2em;
      }
      .ui.footer.segment {
      margin: 5em 0em 0em;
      padding: 5em 0em;
      }
    style#extension_grayscale(type='text/css').
      html *,
      * {
      filter: initial !important;
      }
  body
    .ui.attached.stackable.menu
      .ui.container
        a(href='/')
          img.logo.large(src='images/logo-codebuddy-s.png')
        a.item(href='/dashboard')
          i.grid.layout.icon
          |  Dashboard
        a.item(href='/notifications')
          i.mail.icon
          |  Notifications
          .ui.red.horizontal.label 1
        .ui.simple.dropdown.right.item
            i.user.icon
            |  Kittikorn Prasertsak
            i.dropdown.icon
            .menu
              a.item(href='/user/kittikorn')
                i.unhide.icon
                |  View Profile
              a.item(href='/editprofile')
                i.edit.icon
                |  Edit Profile
              a.item(href='/signout')
                i.sign.out.icon
                |  Sign Out
    .ui.container.segment
      .ui.grid
        .four.wide.column
          h1.ui.header Project Name
          p Project Description
        .eight.wide.column
          center
            | Time
            h3
              #time
        .four.wide.column.right
          button.ui.labeled.icon.button
            i.save.icon
            |  Save
          |  
          button.ui.positive.labeled.icon.button
            i.terminal.icon
            |  Run
      .ui.divider
      br
      .ui.grid
        .four.wide.column
          .ui.top.attached.tabular.menu
            a.active.item Project
            |  
            a.item Team Information
            .right.menu
              .item
          .ui.bottom.attached.segment
            p
              .ui.list
                .item
                  i.folder.icon
                  .content
                    .header src
                    .description Source files for project
                    .list
                      .item
                        i.file.icon
                        .content
                          .header main.py
                          .description Main python file
                .item
                  i.folder.icon
                  .content
                    .header test
                    .description Unit testing files
                    .list
                      .item
                        i.folder.icon
                        .content
                          .header test_main.py
                          .description Unit testing for test_main
                .item
                  i.file.icon
                  .content
                    .header project_information.json
                    .description Project information
          h1#title Video Chat
          style.
            .videoContainer {
            position: relative;
            width: 200px;
            height: 150px;
            }
            .videoContainer video {
            position: absolute;
            width: 100%;
            height: 100%;
            }
            .volume_bar {
            position: absolute;
            width: 5px;
            height: 0px;
            right: 0px;
            bottom: 0px;
            background-color: #12acef;
            }
          p#subTitle
          form#createRoom
          .videoContainer
            video#localVideo(style='height: 150px;', oncontextmenu='return false;')
            #localVolume.volume_bar
          #remotes
        .ui.form
          .field
            textarea(style='width:100px; height: 100px;', rows='5')
    .ui.inverted.vertical.footer.segment
      .ui.center.aligned.container
        img.ui.centered.small.image(src='images/logo-white-s.png')
        .ui.horizontal.inverted.small.divided.link.list
          a.item(href='#') How it worked?
          |  
          a.item(href='#') Contact Us
          |  
          a.item(href='#') About Us
      script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js')
      script(src='/public/javascripts/main.js')
      script(src='SimpleWebRTC-master/simplewebrtc.bundle.js')
      script.
        // grab the room from the URL
        var room = location.search && location.search.split('?')[1];
        // create our webrtc connection
        var webrtc = new SimpleWebRTC({
        // the id/element dom element that will hold "our" video
        localVideoEl: 'localVideo',
        // the id/element dom element that will hold remote videos
        remoteVideosEl: '',
        // immediately ask for camera access
        autoRequestMedia: true,
        debug: false,
        detectSpeakingEvents: true
        });
        // when it's ready, join if we got a room from the URL
        webrtc.on('readyToCall', function () {
        // you can name it anything
        if (room) webrtc.joinRoom(room);
        });
        function showVolume(el, volume) {
        if (!el) return;
        if (volume < -45) { // vary between -45 and -20
        el.style.height = '0px';
        } else if (volume > -20) {
        el.style.height = '100%';
        } else {
        el.style.height = '' + Math.floor((volume + 100) * 100 / 25 - 220) + '%';
        }
        }
        webrtc.on('channelMessage', function (peer, label, data) {
        if (data.type == 'volume') {
        showVolume(document.getElementById('volume_' + peer.id), data.volume);
        }
        });
        webrtc.on('videoAdded', function (video, peer) {
        console.log('video added', peer);
        var remotes = document.getElementById('remotes');
        if (remotes) {
        var d = document.createElement('div');
        d.className = 'videoContainer';
        d.id = 'container_' + webrtc.getDomId(peer);
        d.appendChild(video);
        var vol = document.createElement('div');
        vol.id = 'volume_' + peer.id;
        vol.className = 'volume_bar';
        video.onclick = function () {
        video.style.width = video.videoWidth + 'px';
        video.style.height = video.videoHeight + 'px';
        };
        d.appendChild(vol);
        remotes.appendChild(d);
        }
        });
        webrtc.on('videoRemoved', function (video, peer) {
        console.log('video removed ', peer);
        var remotes = document.getElementById('remotes');
        var el = document.getElementById('container_' + webrtc.getDomId(peer));
        if (remotes && el) {
        remotes.removeChild(el);
        }
        });
        webrtc.on('volumeChange', function (volume, treshold) {
        //console.log('own volume', volume);
        showVolume(document.getElementById('localVolume'), volume);
        });
        // Since we use this twice we put it here
        function setRoom(name) {
        $('form').remove();
        //$('h1').text(name);
        //$('#subTitle').text('Link to join: ' + location.href);
        $('body').addClass('active');
        }
        if (room) {
        setRoom(room);
        } else {
        $('form').load(function () {
        var val = $('#sessionInput').val().toLowerCase().replace(/\\s/g, '-').replace(/[^A-Za-z0-9_\-]/g, '');
        webrtc.createRoom("Hello", function (err, name) {
        //console.log(' create room cb', arguments);
        var newUrl = location.pathname + '?' + 'Hello';
        if (!err) {
        history.replaceState({ foo: 'bar' }, null, newUrl);
        setRoom('Hello');
        } else {
        console.log(err);
        }
        });
        return false;
        });
        }
        var button = $('#screenShareButton'),
        setButton = function (bool) {
        button.text(bool ? 'share screen' : 'stop sharing');
        };
        webrtc.on('localScreenStopped', function () {
        setButton(true);
        });
        setButton(true);
        button.click(function () {
        if (webrtc.getLocalScreen()) {
        webrtc.stopScreenShare();
        setButton(true);
        } else {
        webrtc.shareScreen(function (err) {
        if (err) {
        setButton(true);
        } else {
        setButton(false);
        }
        });
        }
        });
